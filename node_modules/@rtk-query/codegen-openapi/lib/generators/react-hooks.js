"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReactHooks = void 0;
const typescript_1 = __importDefault(require("typescript"));
const generate_1 = require("oazapfts/lib/codegen/generate");
const utils_1 = require("../utils");
const generate_2 = require("../generate");
const factory_1 = require("../utils/factory");
const createBinding = ({ operationDefinition: { verb, path, operation }, overrides, isLazy = false, }) => factory_1.factory.createBindingElement(undefined, undefined, factory_1.factory.createIdentifier(`use${isLazy ? 'Lazy' : ''}${(0, utils_1.capitalize)((0, generate_1.getOperationName)(verb, path, operation.operationId))}${(0, utils_1.isQuery)(verb, overrides) ? 'Query' : 'Mutation'}`), undefined);
const getReactHookName = ({ operationDefinition, endpointOverrides, config }) => {
    const overrides = (0, generate_2.getOverrides)(operationDefinition, endpointOverrides);
    const baseParams = {
        operationDefinition,
        overrides,
    };
    const _isQuery = (0, utils_1.isQuery)(operationDefinition.verb, overrides);
    // If `config` is true, just generate everything
    if (typeof config === 'boolean') {
        return createBinding(baseParams);
    }
    // `config` is an object and we need to check for the configuration of each property
    if (_isQuery) {
        return [
            ...(config.queries ? [createBinding(baseParams)] : []),
            ...(config.lazyQueries ? [createBinding({ ...baseParams, isLazy: true })] : []),
        ];
    }
    return config.mutations ? createBinding(baseParams) : [];
};
const generateReactHooks = ({ exportName, operationDefinitions, endpointOverrides, config, }) => factory_1.factory.createVariableStatement([factory_1.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], factory_1.factory.createVariableDeclarationList([
    factory_1.factory.createVariableDeclaration(factory_1.factory.createObjectBindingPattern(operationDefinitions
        .map((operationDefinition) => getReactHookName({ operationDefinition, endpointOverrides, config }))
        .flat()), undefined, undefined, factory_1.factory.createIdentifier(exportName)),
], typescript_1.default.NodeFlags.Const));
exports.generateReactHooks = generateReactHooks;
//# sourceMappingURL=react-hooks.js.map