#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const __1 = require("../");
const commander_1 = __importDefault(require("commander"));
let ts = false;
try {
    if (require.resolve('esbuild') && require.resolve('esbuild-runner')) {
        require('esbuild-runner/register');
    }
    ts = true;
}
catch { }
try {
    if (!ts) {
        if (require.resolve('typescript') && require.resolve('ts-node')) {
            require('ts-node').register({
                transpileOnly: true,
                compilerOptions: {
                    target: 'es6',
                    module: 'commonjs',
                },
            });
        }
        ts = true;
    }
}
catch { }
// tslint:disable-next-line
const meta = require('../../package.json');
commander_1.default.version(meta.version).usage('</path/to/config.js>').parse(process.argv);
const configFile = commander_1.default.args[0];
if (commander_1.default.args.length === 0 || !/\.(c?(jsx?|tsx?)|jsonc?)?$/.test(configFile)) {
    commander_1.default.help();
}
else {
    if (/\.tsx?$/.test(configFile) && !ts) {
        console.error('Encountered a TypeScript configfile, but neither esbuild-runner nor ts-node are installed.');
        process.exit(1);
    }
    run((0, path_1.resolve)(process.cwd(), configFile));
}
async function run(configFile) {
    var _a;
    process.chdir((0, path_1.dirname)(configFile));
    const unparsedConfig = require(configFile);
    for (const config of (0, __1.parseConfig)((_a = unparsedConfig.default) !== null && _a !== void 0 ? _a : unparsedConfig)) {
        try {
            console.log(`Generating ${config.outputFile}`);
            await (0, __1.generateEndpoints)(config);
            console.log(`Done`);
        }
        catch (err) {
            console.error(err);
            process.exit(1);
        }
    }
}
//# sourceMappingURL=cli.js.map