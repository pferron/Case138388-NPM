"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettify = void 0;
const prettier = __importStar(require("prettier"));
const path = __importStar(require("path"));
const EXTENSION_TO_PARSER = {
    ts: 'typescript',
    tsx: 'typescript',
    js: 'babylon',
    jsx: 'babylon',
    'js.flow': 'flow',
    flow: 'flow',
    gql: 'graphql',
    graphql: 'graphql',
    css: 'postcss',
    scss: 'postcss',
    less: 'postcss',
    stylus: 'postcss',
    markdown: 'markdown',
    md: 'markdown',
    json: 'json',
};
async function prettify(filePath, content) {
    let config = null;
    let parser = 'typescript';
    if (filePath) {
        const fileExtension = path.extname(filePath).slice(1);
        parser = EXTENSION_TO_PARSER[fileExtension];
        config = await prettier.resolveConfig(process.cwd(), {
            useCache: true,
            editorconfig: true,
        });
    }
    return prettier.format(content, {
        parser,
        ...config,
    });
}
exports.prettify = prettify;
//# sourceMappingURL=prettier.js.map